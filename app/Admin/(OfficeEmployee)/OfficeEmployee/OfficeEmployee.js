"use client";
import { useEffect, useState } from "react";
import {
  CONSTANTOFFICEEMPLOYEE,
  OFFICEFIELD as fields,
} from "@/allFormField/field";
import { ReactHookForm } from "@/components/ModelForm/FormModel";
import { getAllRoleType } from "@/actions/roleTypeAction/roleTypeAction";

import {
  TableAction,
  TableBody,
  TableData,
  TableDataStatus,
  TableTH,
} from "@/components/Table";
import Search from "@/components/Search/search";
import {
  changeDateToString,
  exportCSVFile,
} from "@/actions/commonAction/commonAction";
import {
  handleOfficeEmployee,
  officeEmployeDelete,
  officeEmployeUpdateStatus,
  searchOfficeEmployeByKeyword,
} from "@/actions/employeAction/employeAction";
import { useDebounce } from "@/helper/debounceHelper";
import {
  Breadcrumbs,
  EmployeeModelCard,
  SideDrawer,
} from "@/components/ChangePassword/ChnagePassword";
import Popup from "@/components/Popup/Popup";
import { Zoom, toast } from "react-toastify";
import Shimmer from "@/components/Shimmer/Shimmer";
import { FaceFrownIcon } from "@heroicons/react/24/outline";
import { sendMail } from "@/actions/emailAction/emailAction";
import Button from "@/components/Button/button";
import { PlusCircleIcon } from "lucide-react";

const OfficeEmployee = ({ page }) => {
  return <AddOfficeRole page={page} />;
};

export default OfficeEmployee;

const AddOfficeRole = ({ page }) => {
  const [resetFlag, setResetFlag] = useState(false);
  const [search, setSearch] = useState();
  const [roles, setRoles] = useState([]);
  const [eData, setEData] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const [editId, setEditId] = useState();
  const [delId, setDelId] = useState({});
  const searchDebounce = useDebounce(search, 500); // This is Debounce Search
  const [initialValue, setInitialValue] = useState(null); // INITIAL VALUE FROM API
  const [isOpenDelete, setIsOpenDelete] = useState(false);
  const [loading, setLoading] = useState(true);
  const [drawer, setDrawer] = useState(false);
  let i = 1;
  const roleType = async () => {
    try {
      const response = await getAllRoleType();
      //change key name like siteName to lable
      if (!response.success)
        return toast.warn("You have to add first Site Project At least One");
      setRoles(
        JSON.parse(response?.data).map((item) => ({
          code: item._id,
          label: item.roleTitle,
        }))
      );
    } catch (error) {
      toast.error("Something  went wrong");
      // console.log("Error fetching options", error);
    }
  };
  const onCreate = async (data) => {
    try {
      const response = await handleOfficeEmployee(editId, data);
      if (response.success) {
        toast.success(response.message); // toast
        fetchData(); // fetch data
        setIsOpen(!isOpen);
      } else {
        toast.error(response.message);
      } // toast
    } catch (error) {
      toast.error("Something  went wrong");
    }
  };
  const updatedRoleField = fields.map((field) => {
    if (field.name === "roleType") {
      return {
        ...field,
        options: roles,
      };
    }
    return field;
  });
  // FETCH ALL DATA WITH USER SEARCH OR ALL DATA WITH  PAGINATION
  const fetchData = async () => {
    setLoading(true);
    try {
      const searchPro = await searchOfficeEmployeByKeyword(searchDebounce);
      if (searchPro.count === 0)
        toast.warn("No Employee found", {
          icon: <FaceFrownIcon className="h-6 w-6 text-warning" />,
          position: "top-center",
          theme: "dark",
          transition: Zoom,
          autoClose: 3000,
        });
      if (searchPro.success) {
        // console.log(searchPro.data);
        setEData(JSON.parse(searchPro.data));
      } else {
        setEData(null);
      }
    } catch (error) {
      toast.error("Something  went wrong");
      console.error("Error fetching or searching projects:", error);
    } finally {
      setLoading(false);
    }
  };
  // handle Open Model
  const handleOpenModel = async (data) => {
    setEditId(data._id);
    setInitialValue(data);
    setIsOpen(!isOpen);
  };
  const onHandleCloseModal = () => {
    setIsOpen(false);
    setInitialValue("");
    setEditId("");
  };

  const handleModelUpdate = async () => {
    if (delId.type === "Delete") {
      try {
        const response = await officeEmployeDelete(delId.id); // Call the onDelete function provided by the parent component
        if (!response.status) return toast.error(response.message);
        setDelId();
        setIsOpenDelete(false);
        fetchData();
        toast.success(response.message);
      } catch (err) {
        console.log("office employe status chnage error", err.message);
      }
    } else {
      try {
        const response = await officeEmployeUpdateStatus(delId.id); // Call the onDelete function provided by the parent component
        if (!response.status) return toast.error(response.message);
        setDelId({});
        setIsOpenDelete(false);
        fetchData();
        toast.success(response.message);
      } catch (err) {
        console.log("office employe status chnage error", err.message);
      }
    }
  };
  const onClose = () => {
    setDelId({});
    setIsOpenDelete(false);
  };
  const handleModel = async (id, type) => {
    setDelId({ id: id, type: type });
    setIsOpenDelete(true);
  };

  const openDrawer = (data) => {
    setInitialValue(data);
    setDrawer(true);
  };
  const closeDrawer = () => {
    setInitialValue("");
    setDrawer(false);
  };

  const sendMailTest = async () => {
    try {
      const response = await sendMail();
      console.log(response);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    roleType();
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchDebounce]);

  return (
    <>
      {/* Header */}
      {eData.length > 0 ? (
        <>
          <div className="mt-2.5">
            <Breadcrumbs
              breadcrumbs={[
                { label: "Dashboard", href: "/" },
                { label: "Office Employee", href: { page }, active: true },
              ]}
            />
          </div>
          <div className="p-4 bg-white block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5">
            <div className="mb-1 w-full">
              <div className="sm:flex">
                <div className="sm:flex items-center sm:divide-x sm:divide-gray-100 mb-3 sm:mb-0">
                  <Search
                    onChange={setSearch}
                    placeholder="Search Office Employee"
                  />
                </div>
                <div className="flex items-center space-x-2 sm:space-x-3 ml-auto">
                  <TableAction
                    svg={
                      <svg
                        className="-ml-1 mr-2 h-6 w-6"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                          clipRule="evenodd"
                        ></path>
                      </svg>
                    }
                    cls={
                      "w-1/2 sm:w-auto text-white bg-cyan-600 hover:bg-cyan-700 focus:ring-4 focus:ring-cyan-200"
                    }
                    btnName={"Add"}
                    handleClick={() => setIsOpen(!isOpen)}
                  />
                  <TableAction
                    svg={
                      <svg
                        className="-ml-1 mr-2 h-6 w-6"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          fillRule="evenodd"
                          d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
                          clipRule="evenodd"
                        ></path>
                      </svg>
                    }
                    btnName={"Export"}
                    cls={
                      "w-1/2 sm:w-auto text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 focus:ring-4 focus:ring-cyan-200"
                    }
                    handleClick={() => exportCSVFile(eData)}
                  />
                </div>
              </div>
            </div>
          </div>
          <div className="flex flex-col">
            <div className="overflow-x-auto">
              <div className="align-middle inline-block min-w-full">
                <div className="shadow overflow-hidden">
                  <table className="table-fixed min-w-full divide-y divide-gray-200">
                    <TableTH data={CONSTANTOFFICEEMPLOYEE} />
                    {/* if loading , show skeleton rows */}
                    {loading ? (
                      <Shimmer length={9} />
                    ) : (
                      // <ShimmerEffect />
                      <TableBody>
                        {eData &&
                          eData.map((item) => (
                            <tr key={item._id}>
                              <TableData title={i++} />
                              <TableData
                                onclick={() => openDrawer(item)}
                                title={item?.name}
                              />
                              <TableData title={item?.roleType?.roleTitle} />
                              <TableData title={item?.department} />
                              <TableData title={item?.email} />
                              <TableData title={item?.phoneNumber} />
                              <TableData
                                title={changeDateToString(item.startDate)}
                              />

                              <TableData
                                title={changeDateToString(item.endDate)}
                                className={
                                  new Date() < new Date(item.endDate)
                                    ? "text-amber-500"
                                    : "text-rose-600"
                                }
                              />
                              <TableDataStatus
                                isActive={item?.isActive}
                                // handleClick={() => handleActiveStatus(item?._id)}
                                handleClick={() =>
                                  handleModel(item._id, "Status")
                                }
                              />
                              <td className="p-4 whitespace-nowrap space-x-2">
                                <TableAction
                                  svg={
                                    <svg
                                      className="h-5 w-5"
                                      fill="currentColor"
                                      viewBox="0 0 20 20"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"></path>
                                      <path
                                        fillRule="evenodd"
                                        d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"
                                        clipRule="evenodd"
                                      ></path>
                                    </svg>
                                  }
                                  cls="text-white bg-cyan-600 hover:bg-cyan-700 focus:ring-4 focus:ring-cyan-200"
                                  handleClick={() => handleOpenModel(item)}
                                />
                                <TableAction
                                  svg={
                                    <svg
                                      className="h-5 w-5"
                                      fill="currentColor"
                                      viewBox="0 0 20 20"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <path
                                        fillRule="evenodd"
                                        d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                                        clipRule="evenodd"
                                      ></path>
                                    </svg>
                                  }
                                  cls="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:ring-red-300"
                                  handleClick={() =>
                                    handleModel(item._id, "Delete")
                                  }
                                />
                              </td>
                            </tr>
                          ))}
                      </TableBody>
                    )}
                  </table>
                </div>
              </div>
            </div>
          </div>
        </>
      ) : (
        <div className="bg-white">
          <div className="px-12">
            <div className="bg-[url('/images/bgpattern.svg')] text-center text-neutral-700 mt-10 p-2 h-[27rem] flex flex-col items-center justify-center border border-dashed border-neutral-300 rounded-md">
              <svg
                width="440"
                height="428"
                viewBox="0 0 440 428"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="size-60"
              >
                <path
                  d="M142.277 1.94063C133.451 4.26051 126.693 9.65676 122.659 17.6755C120.44 22.164 119.734 25.7951 119.986 31.5444C120.187 36.0833 120.137 36.2346 119.128 35.8815C117.212 35.2764 112.37 35.6798 110.101 36.6885C102.788 39.9161 98.6024 49.1452 100.922 57.1135C101.628 59.5343 102.385 60.5934 105.562 63.821L109.395 67.6034L109.042 71.0328C108.386 77.6899 111.463 83.4392 116.758 85.5069C120.238 86.8181 126.391 86.6668 129.82 85.1539C132.543 83.9939 136.023 80.7158 136.023 79.3542C136.023 78.1942 134.056 78.4464 132.392 79.8585C129.82 82.0271 127.097 83.1366 123.819 83.3888C120.994 83.5905 120.843 83.5905 122.406 83.0862C127.046 81.6741 128.509 80.9176 129.87 79.3542C130.677 78.4464 131.484 77.3873 131.585 77.0343C131.736 76.53 132.19 76.5804 133.602 77.236C136.83 78.749 142.579 77.8916 142.579 75.8743C142.579 74.8657 141.722 74.664 138.696 74.9666C136.427 75.1683 135.721 75.017 134.107 73.9075C128.458 70.2259 129.568 60.9464 135.67 60.9464C138.091 60.9464 139.453 61.7533 142.63 65.0818C145.252 67.8556 147.068 68.4608 149.388 67.3513C152.111 66.04 152.767 61.955 151.405 55.0962C151.102 53.6337 151.153 53.5328 153.17 52.9277C155.591 52.2216 158.869 49.4478 159.676 47.3801L160.281 45.968L163.156 47.1279C166.989 48.6913 170.418 48.6913 173.646 47.0775C175.007 46.4219 176.47 45.2619 176.924 44.5559L177.68 43.2447L179.042 44.3037C182.118 46.7245 186.859 47.5314 189.431 46.1193C190.641 45.4637 190.692 45.5141 192.911 49.8009C198.509 60.6438 200.072 65.9896 200.072 73.9075C200.072 85.1034 195.483 93.4248 186.909 97.7115C182.723 99.8297 179.042 100.485 173.343 100.132C167.392 99.7792 163.105 98.468 158.213 95.4925C153.624 92.6179 152.968 92.0631 148.53 86.7677C146.564 84.4478 144.899 82.6827 144.798 82.7836C144.647 82.8844 144.849 83.8931 145.252 85.0026L145.908 87.0199L143.185 88.7346C138.444 91.7101 136.376 95.089 135.771 100.838C135.368 104.722 136.275 107.546 138.293 108.454C140.058 109.261 140.209 108.857 139.049 106.285C137.839 103.612 137.788 101.797 138.797 98.3671C139.654 95.4925 140.865 94.383 143.941 93.6769C146.866 93.0213 149.136 93.9291 154.027 97.5602C164.417 105.327 170.317 106.386 181.664 102.603C184.64 101.595 187.262 100.939 187.565 101.09C189.128 102.049 190.137 108.403 189.229 111.429C189.027 112.085 187.868 113.951 186.607 115.514C184.236 118.641 184.539 119.246 187.464 117.229C191.65 114.405 193.466 107.546 191.6 102.049L190.54 99.0228L191.902 98.0645C194.625 96.0977 197.954 92.164 199.669 88.8354C202.089 84.1957 203.098 79.8081 203.098 73.9579C203.098 66.1913 201.484 60.2403 197.097 51.4651L195.029 47.3297H196.441C199.669 47.3297 202.796 45.7158 206.275 42.236C208.141 40.37 209.654 39.0083 209.654 39.2101C209.654 40.017 206.376 44.6063 204.006 47.1279C202.594 48.6409 201.535 50.0026 201.686 50.1539C202.342 50.7591 204.813 49.5487 207.133 47.481C212.075 43.0429 214.849 34.5199 213.739 27.3585C212.327 18.0285 205.015 10.3124 195.281 7.74034C187.262 5.67261 178.891 8.04293 174.906 13.5401L173.444 15.6078L172.284 13.2375C170.62 10.0098 165.93 5.82391 161.592 3.75619C155.44 0.831116 148.883 0.175496 142.277 1.94063ZM119.128 82.6323C119.784 82.9349 119.885 83.0862 119.381 83.0862C118.977 83.0862 118.271 82.8844 117.868 82.6323C116.96 82.0271 117.767 82.0271 119.128 82.6323Z"
                  fill="black"
                />
                <path
                  d="M380.772 5.673C381.175 9.55628 384.352 18.6845 386.823 23.1226C389.698 28.2667 394.237 32.7551 398.07 34.2681C400.491 35.2263 402.004 35.428 406.341 35.4785C412.493 35.4785 415.368 34.722 420.613 31.5952L424.093 29.5779L428.178 30.7378C433.372 32.2004 434.028 32.7047 432.868 34.4194C431.809 36.0837 426.968 39.16 423.488 40.4208C421.067 41.2782 419.907 41.379 413.906 41.0765C407.4 40.8243 407.148 40.8243 408.61 41.6312C412.443 43.7494 418.747 44.3041 423.74 43.0433C427.22 42.0851 428.834 41.2277 434.684 36.8401C438.567 33.9151 440.181 32.0995 439.525 31.3935C439.374 31.2926 436.348 30.3848 432.767 29.3762C429.187 28.3675 425.707 27.4093 425.001 27.2076C424.093 26.905 422.731 27.3589 419.554 28.9727C412.09 32.8056 403.617 33.7133 398.171 31.2926C395.8 30.2335 392.169 26.6024 389.95 23.1226C388.135 20.2479 385.31 13.5909 384.151 9.35455C383.243 6.17732 383.243 5.92516 384.05 6.17732C390.858 8.24504 393.38 8.69893 397.767 8.74936C401.651 8.74936 403.012 8.54764 404.979 7.63986C406.29 7.03467 407.349 6.27818 407.349 5.92516C407.349 5.47127 406.694 5.47127 404.979 5.77386C403.617 6.02602 400.289 6.22775 397.515 6.22775C393.279 6.22775 391.564 5.97559 386.874 4.56349C383.798 3.70614 381.125 2.94965 380.872 2.94965C380.671 2.94965 380.62 4.16003 380.772 5.673Z"
                  fill="black"
                />
                <path
                  d="M409.214 8.351C408.811 9.00662 412.24 16.5715 414.157 19.2444C416.174 21.9677 419.603 24.6406 421.116 24.6406C421.873 24.6406 421.419 23.9346 418.998 21.5643C416.779 19.3452 415.417 17.4288 414.106 14.6046C413.148 12.4864 412.089 10.217 411.736 9.51094C411.08 8.25014 409.668 7.59452 409.214 8.351Z"
                  fill="black"
                />
                <path
                  d="M393.229 13.9031C393.229 15.4665 405.988 17.3829 407.602 16.0716C409.115 14.8108 408.056 14.3569 403.517 14.3065C401.046 14.3065 397.717 14.0544 396.154 13.8526C394.338 13.55 393.229 13.6005 393.229 13.9031Z"
                  fill="black"
                />
                <path
                  d="M410.628 23.2798C410.023 23.6328 407.602 23.8849 404.626 23.8849C401.248 23.8849 399.533 24.0867 399.432 24.4901C399.079 25.4988 408.106 26.3057 411.031 25.4988C412.04 25.1962 412.393 24.7927 412.393 23.8849C412.393 22.4728 412.09 22.372 410.628 23.2798Z"
                  fill="black"
                />
                <path
                  d="M218.029 30.543C216.818 31.7534 219.642 34.981 223.727 37.2C225.392 38.0574 226.905 39.0156 227.056 39.2678C227.207 39.5704 226.451 41.8902 225.392 44.4119C222.87 50.3124 219.642 61.5084 219.844 63.5761C220.096 65.9969 221.105 65.896 221.761 63.3744C223.223 57.6755 225.19 52.0776 227.661 46.4796L230.435 40.3268L234.419 41.8398C236.638 42.6467 238.908 43.5545 239.412 43.8067C240.925 44.6136 241.076 46.3787 239.916 49.0516C237.395 55.0026 235.478 64.4839 236.84 64.4839C237.142 64.4839 238.353 61.458 239.563 57.7764C240.774 54.1453 242.337 49.8585 242.993 48.3456C243.648 46.8326 244.203 45.5214 244.203 45.4709C244.304 45.1179 259.887 50.0603 260.19 50.5646C260.946 51.6741 260.593 53.7923 259.08 57.373C256.962 62.5675 255.399 68.4176 255.802 69.9306C256.206 71.5444 256.71 70.9392 257.82 67.5098C258.324 65.9969 259.837 62.2649 261.199 59.2389C262.51 56.2634 263.619 53.3384 263.619 52.834C263.619 52.2793 263.922 51.7245 264.275 51.6237C264.981 51.3211 285.608 56.0113 286.163 56.566C286.364 56.7678 285.81 58.4825 284.902 60.3485C279.909 71.0401 276.984 77.798 275.673 81.6813C274.261 85.9681 273.756 90.3557 274.664 90.9104C275.168 91.2634 275.017 91.566 278.093 83.1439C280.161 77.445 283.288 70.8888 288.836 60.4493C289.945 58.3816 290.802 56.213 290.702 55.6583C290.601 54.8009 289.037 54.2966 279.253 51.8254C249.145 44.311 230.637 38.007 221.508 32.2577C219.743 31.1482 218.18 30.3917 218.029 30.543Z"
                  fill="black"
                />
                <path
                  d="M308.807 37.3536C308.151 39.4717 308.151 40.6821 308.756 43.6576C309.664 48.0956 311.127 51.9285 311.782 51.7268C312.589 51.4242 312.387 40.3291 311.48 38.5135C310.723 36.8997 309.16 36.244 308.807 37.3536Z"
                  fill="black"
                />
                <path
                  d="M27.5948 39.5209C27.5948 41.6391 32.8901 44.7659 38.9925 46.3293C41.0097 46.884 44.9939 47.4388 47.8181 47.6405L52.9118 47.9935L52.6092 49.5569C52.004 52.4316 47.8685 60.2486 45.4982 62.871C42.321 66.4013 39.3959 68.0656 35.7648 68.3682C32.1337 68.7212 29.6121 67.5612 25.5775 63.7284L22.8037 61.1059L18.0126 60.8033C12.919 60.4503 8.43049 59.4417 5.20283 57.8783C4.09332 57.3739 2.58035 56.92 1.77343 56.92C0.61349 56.92 0.361328 57.1218 0.361328 58.1304C0.361328 59.7442 3.38726 65.544 5.75758 68.4186C9.48957 73.0079 18.2648 75.6808 25.0731 74.3696C28.906 73.6131 28.6538 73.4618 21.0386 72.1002C17.0544 71.3941 14.2302 70.5368 11.9608 69.4272C9.03568 67.9647 8.48093 67.41 7.06882 64.737C6.16104 63.0728 5.40456 61.4589 5.40456 61.1059C5.40456 60.7025 6.4132 60.8538 8.58179 61.5094C10.2965 62.0641 13.978 62.7702 16.7518 63.0728L21.795 63.678L24.7201 66.3509C28.1999 69.5281 30.772 70.9402 33.7979 71.3437C38.589 71.9993 44.6409 68.8221 48.5242 63.5771C52.6596 58.0295 56.8959 47.1866 55.4838 45.7745C55.1812 45.4719 52.1553 45.018 48.7259 44.8163C41.8671 44.312 38.3873 43.5555 33.8484 41.4878C27.4435 38.6131 27.5948 38.6636 27.5948 39.5209Z"
                  fill="black"
                />
                <path
                  d="M390.507 39.867C391.263 42.3886 391.667 43.0947 392.978 44.4059C394.541 45.9693 396.004 46.2215 396.458 45.0111C396.66 44.5572 396.71 44.1537 396.66 44.1033C394.794 43.3973 393.281 42.1365 392.474 40.6235C391.364 38.5558 389.902 38.001 390.507 39.867Z"
                  fill="black"
                />
                <path
                  d="M24.82 43.2392C23.2566 47.9799 19.222 52.7205 14.7335 55.0404C12.0102 56.4525 11.8589 56.6542 13.0692 56.8055C17.6081 57.3603 27.0894 47.5764 27.0894 42.281C27.0894 39.8603 25.7782 40.415 24.82 43.2392Z"
                  fill="black"
                />
                <path
                  d="M321.009 43.5016C319.597 44.5102 318.084 48.6961 318.084 51.4194C318.084 52.7811 318.286 53.8906 318.588 53.8906C319.244 53.8906 323.127 45.5189 323.127 44.0563C323.127 42.6947 322.32 42.4425 321.009 43.5016Z"
                  fill="black"
                />
                <path
                  d="M384.15 43.9509C384.15 45.0604 386.975 48.9437 388.235 49.6497C390.001 50.6079 391.211 50.5071 391.211 49.3976C391.211 48.7924 390.757 48.3385 389.95 48.1368C389.294 47.9855 387.882 46.8255 386.823 45.5647C384.907 43.2448 384.15 42.7909 384.15 43.9509Z"
                  fill="black"
                />
                <path
                  d="M183.632 48.5408C178.236 50.9111 177.984 59.7872 183.027 66.8477C184.792 69.2685 187.616 71.2858 188.474 70.7815C188.827 70.5797 188.575 69.8232 187.717 68.7137C186.507 67.0999 186.456 66.999 187.415 66.999C188.675 66.999 190.995 64.2253 190.995 62.7627C190.995 62.1575 190.642 60.5437 190.188 59.2325C189.533 57.2656 189.18 56.8622 188.272 57.0135C187.415 57.1143 187.263 57.4673 187.415 58.6777C187.919 62.7627 187.768 64.2253 186.658 64.3766C183.279 64.8809 180.758 58.1734 182.624 53.6345C183.531 51.5163 184.893 50.7598 187.717 50.9111C190.693 51.0624 191.701 50.1547 190.037 48.793C188.675 47.6835 185.902 47.5826 183.632 48.5408Z"
                  fill="black"
                />
                <path
                  d="M30.3673 49.9064C29.9134 50.6125 29.7117 50.4612 34.6541 52.3776C39.6469 54.294 43.8328 54.6975 44.1353 53.2349C44.2866 52.5793 43.9841 52.3776 42.8745 52.3776C41.412 52.3776 35.4106 50.8646 32.9898 49.9064C31.2247 49.2003 30.7708 49.2003 30.3673 49.9064Z"
                  fill="black"
                />
                <path
                  d="M169.31 50.0543C165.729 51.1134 164.62 51.6682 163.157 53.1307C160.283 56.0053 161.896 57.1148 165.83 55.0976C168.049 53.988 169.259 53.6855 172.336 53.6855C176.017 53.635 176.118 53.5846 176.27 52.3238C176.37 51.6177 176.118 50.7604 175.765 50.5082C174.656 49.55 171.68 49.3483 169.31 50.0543Z"
                  fill="black"
                />
                <path
                  d="M23.1559 54.7947C22.702 55.0973 23.6602 55.7529 26.1314 56.9128C32.032 59.6362 37.0752 60.7457 37.2769 59.4345C37.2769 59.1319 37.3273 58.678 37.3778 58.3754C37.4282 58.0728 36.4196 57.7198 35.1588 57.6189C33.898 57.518 30.872 56.7615 28.4008 55.9042C25.8792 55.0973 23.8619 54.3912 23.8619 54.3912C23.8115 54.3912 23.5089 54.593 23.1559 54.7947Z"
                  fill="black"
                />
                <path
                  d="M327.87 56.9191C324.743 57.2722 321.465 58.7347 321.768 59.6929C321.969 60.1972 332.51 60.1468 334.376 59.6425C335.788 59.1886 335.334 57.9278 333.468 57.1209C332.51 56.7678 331.551 56.4652 331.35 56.4652C331.148 56.5157 329.585 56.7174 327.87 56.9191Z"
                  fill="black"
                />
                <path
                  d="M174.907 59.5859C174.504 60.1407 174.605 60.8467 175.412 62.6623C175.966 63.9735 176.319 65.3856 176.168 65.7891C175.563 67.3525 170.167 65.9404 168.351 63.7718C167.544 62.8136 165.93 62.7127 165.628 63.5701C165.224 64.6796 166.233 65.8899 168.553 67.302C171.528 69.0167 173.949 69.5715 176.118 68.9663C179.093 68.109 179.698 65.3352 177.782 61.4519C176.521 58.9807 175.815 58.5268 174.907 59.5859Z"
                  fill="black"
                />
                <path
                  d="M296.046 61.5552C291.961 67.1028 290.65 69.2714 288.482 74.1129C286.868 77.744 286.313 79.61 286.414 80.9717C286.565 82.8377 286.666 82.6864 289.389 77.0884C291.81 72.0956 296.45 64.8333 298.669 62.5135C299.274 61.9083 299.526 61.9083 300.535 62.5639C301.19 62.9673 303.359 63.9256 305.376 64.7325C307.394 65.5394 309.209 66.3967 309.461 66.6993C309.764 67.1028 309.209 68.414 307.848 70.5826C306.688 72.3982 304.569 75.6763 303.107 77.8953C297.912 86.0149 294.18 95.1936 295.088 97.6143C295.391 98.3708 295.492 98.3708 296.349 97.463C296.853 96.9587 297.912 94.6892 298.719 92.4702C300.333 87.9313 304.67 80.4169 309.562 73.7599C313.395 68.6158 314.757 66.195 314.353 65.2368C314.252 64.8838 312.588 64.0769 310.672 63.4717C308.806 62.8161 305.83 61.7065 304.116 60.9501C298.568 58.4284 298.265 58.4789 296.046 61.5552Z"
                  fill="black"
                />
                <path
                  d="M43.0763 72.8056C42.6728 73.7638 39.0417 75.5794 37.4783 75.5794C35.7132 75.5794 35.3602 76.4872 36.9236 76.8906C39.7982 77.5967 45.2953 74.7221 44.5893 72.9065C44.1858 71.8474 43.4293 71.797 43.0763 72.8056Z"
                  fill="black"
                />
                <path
                  d="M44.39 78.3903C43.4822 79.3485 42.7762 79.6006 40.7085 79.6006C37.5312 79.6006 37.4808 80.6597 40.5572 81.3153C43.3309 81.8701 46.5082 80.458 46.5082 78.6424C46.5082 77.0286 45.7517 76.9277 44.39 78.3903Z"
                  fill="black"
                />
                <path
                  d="M313.748 78.4955C312.537 79.3024 306.637 86.7664 303.661 91.2044C298.921 98.4162 297.105 103.812 299.374 103.812C300.08 103.812 300.534 103.258 300.988 101.896C302.4 97.458 307.494 89.0863 312.033 83.6396C314.101 81.2693 315.311 78.7981 314.655 78.3946C314.403 78.2433 314 78.2938 313.748 78.4955Z"
                  fill="black"
                />
                <path
                  d="M242.789 80.2118C240.671 82.2795 236.536 88.4323 234.165 93.072C231.694 97.964 231.139 101.141 231.593 109.21C231.795 112.892 231.744 115.918 231.492 115.918C231.291 115.918 230.282 115.666 229.273 115.414C225.743 114.405 225.188 114.96 215.152 129.282C209.605 137.2 202.948 143.958 198.51 146.127C191.096 149.758 185.902 148.548 173.798 140.478C164.871 134.527 163.963 134.073 161.089 134.073L158.971 134.124L161.391 135.385C162.703 136.091 166.788 138.764 170.469 141.386C181.11 149.001 187.465 151.624 193.668 151.069C201.384 150.363 207.537 144.916 219.792 127.971C225.138 120.608 226.953 118.944 229.677 118.944C231.744 118.944 243.243 124.794 247.429 128.072C250.858 130.644 252.018 131.098 252.018 129.736C252.018 127.618 249.698 125.702 239.36 119.196C236.435 117.38 234.871 114.506 234.266 110.068C233.51 103.814 234.115 99.5274 236.435 94.6859C238.452 90.5 243.243 83.1369 243.949 83.1369C244.201 83.1369 243.747 84.4481 242.94 86.0115C240.57 91.0043 239.208 95.8458 239.612 98.0144L240.015 99.9813L241.932 96.3501C243.495 93.3242 246.017 89.6931 248.135 87.4236C248.387 87.121 248.185 87.8271 247.732 88.9366C244.806 95.8458 243.798 100.334 245.008 101.04C246.319 101.898 248.085 100.536 251.514 96.1988C253.481 93.6772 255.246 91.7608 255.397 91.8617C255.7 92.2147 253.985 95.5432 251.514 99.3256C250.404 101.04 249.497 102.957 249.497 103.612C249.497 105.176 252.27 106.033 256.103 105.68C257.768 105.529 259.079 105.579 259.079 105.781C259.079 106.033 257.415 106.689 255.397 107.294C250.606 108.706 249.749 109.362 248.74 112.287C247.832 114.96 247.378 115.615 245.109 117.532C243.546 118.792 243.546 118.893 244.453 119.196C245.059 119.398 246.269 119.146 247.378 118.591C248.841 117.885 249.598 116.977 250.909 114.304C252.523 110.925 252.623 110.875 255.448 110.068C259.432 108.958 262.508 107.092 262.912 105.579C263.517 103.058 263.013 102.805 257.818 102.805C255.195 102.805 253.027 102.705 253.027 102.553C253.027 102.402 254.187 100.334 255.549 97.9135C256.961 95.4928 258.322 92.719 258.574 91.8112C259.18 89.4913 258.474 87.6758 256.91 87.6758C255.397 87.6758 254.742 88.2305 251.363 92.5677C247.732 97.157 247.227 97.4596 248.538 94.1311C251.11 87.9279 252.069 84.902 251.917 83.6916C251.665 81.6743 250.152 81.7752 247.832 83.9942C246.471 85.255 245.916 85.5576 246.219 84.902C247.429 81.6743 247.53 80.9683 247.278 79.8588C246.824 78.0432 244.907 78.1945 242.789 80.2118Z"
                  fill="black"
                />
                <path
                  d="M175.513 82.1767C174.706 82.9837 175.866 85.2531 177.48 86.0096C179.699 87.0687 180.556 87.22 182.271 86.6148C183.633 86.2113 183.935 85.8079 183.835 85.0009C183.683 84.0427 183.33 83.8914 181.565 83.8914C180.103 83.8914 179.144 83.5384 178.287 82.7315C176.925 81.4707 176.32 81.3698 175.513 82.1767Z"
                  fill="black"
                />
                <path
                  d="M108.085 88.182C107.329 89.5941 106.774 91.0566 106.925 91.4097C107.228 92.1157 107.48 92.2166 120.643 96.9572C125.636 98.7223 130.629 100.336 131.688 100.538C133.453 100.891 133.604 100.84 133.402 99.7814C133.301 98.9745 132.747 98.4197 131.637 98.0667C130.78 97.7641 129.922 97.3607 129.771 97.2094C129.62 97.0581 129.922 95.7468 130.477 94.3347C131.536 91.561 131.788 89.1906 131.032 89.1906C130.78 89.1906 129.973 90.401 129.216 91.8131C126.846 96.4529 126.695 96.5033 121.046 94.4356L117.466 93.1244L118.172 91.4601C119.13 89.0898 118.172 88.6359 116.457 90.6532C115.146 92.1661 114.995 92.2166 113.33 91.6618C111.01 90.9053 110.304 89.9471 110.304 87.5768C110.304 86.5177 110.103 85.6604 109.901 85.6604C109.649 85.6604 108.842 86.8203 108.085 88.182Z"
                  fill="black"
                />
                <path
                  d="M277.639 92.2219C276.177 93.1296 276.53 95.4495 278.345 97.2651L279.908 98.8285L278.143 98.5259C275.874 98.072 274.21 98.9293 274.21 100.493C274.21 101.602 275.37 102.913 278.042 104.729C278.9 105.284 278.849 105.334 277.589 105.082C276.832 104.931 275.319 105.032 274.26 105.334C270.276 106.393 271.335 108.965 276.782 111.537L280.413 113.252L278.093 113.857C275.672 114.412 274.462 115.723 275.017 117.135C275.521 118.396 278.749 119.153 284.094 119.203C288.785 119.203 289.339 119.102 291.205 117.841C294.181 115.875 295.996 111.941 296.299 106.797C296.551 102.207 296.047 101.048 292.264 97.9711C287.019 93.634 279.908 90.8602 277.639 92.2219ZM283.943 96.0547C287.272 97.7694 290.146 99.7363 292.315 101.854C293.929 103.519 293.979 103.67 293.727 106.696C293.374 111.084 291.306 115.269 289.037 116.228C287.221 116.984 279.959 117.186 278.9 116.53C278.496 116.278 279.656 115.673 282.027 114.866C285.204 113.857 285.809 113.504 285.708 112.647C285.607 111.89 284.952 111.537 283.035 111.084C279.908 110.428 275.723 108.562 275.723 107.906C275.723 107.402 276.933 107.503 282.228 108.411C283.691 108.663 285.809 108.713 286.919 108.562C288.532 108.259 288.835 108.058 288.734 107.2C288.633 106.494 287.725 105.939 285.305 105.082C281.623 103.872 277.992 102.056 277.488 101.3C277.034 100.543 277.841 100.644 283.59 102.157C286.465 102.913 288.986 103.367 289.138 103.166C289.692 102.661 288.331 101.35 285.305 99.4337C282.279 97.4668 280.262 95.8025 280.262 95.1469C280.262 94.4409 281.169 94.693 283.943 96.0547Z"
                  fill="black"
                />
                <path
                  d="M211.321 100.888C210.362 101.998 207.538 108.554 205.622 113.9C204.664 116.522 203.705 118.842 203.403 119.044C202.445 119.699 200.427 119.498 197.653 118.439C194.628 117.279 193.014 117.127 193.014 118.086C193.014 119.044 212.027 126.508 214.548 126.508C215.002 126.508 215.204 126.104 215.103 125.449C215.002 124.591 214.094 124.137 210.665 123.028C206.681 121.767 206.378 121.565 206.53 120.355C206.58 119.649 207.891 115.261 209.455 110.622C212.128 102.452 212.733 99.1231 211.321 100.888Z"
                  fill="black"
                />
                <path
                  d="M132.949 113.545C129.721 115.713 123.72 125.85 118.677 137.702C113.18 150.663 104.959 178.249 102.74 191.261C101.681 197.414 101.378 204.777 102.185 203.869C102.438 203.617 103.244 200.591 104.001 197.111C111.566 161.808 124.123 128.271 134.21 116.52C136.731 113.545 136.933 113.141 135.723 112.687C134.664 112.284 134.916 112.233 132.949 113.545Z"
                  fill="black"
                />
                <path
                  d="M214.748 116.321C213.033 119.851 212.882 121.616 214.193 121.868C214.748 121.969 215.303 120.91 216.11 118.338C218.076 111.933 217.37 110.925 214.748 116.321Z"
                  fill="black"
                />
                <path
                  d="M267.349 128.276C264.878 134.227 264.374 137.102 265.786 137.102C266.593 137.102 269.82 126.713 269.568 124.746C269.467 123.485 269.114 123.989 267.349 128.276Z"
                  fill="black"
                />
                <path
                  d="M285.607 124.392C285.052 125.299 281.27 135.638 280.261 139.017C279.656 141.186 278.849 142.85 278.345 143.001C277.336 143.405 272.041 142.245 265.384 140.177C262.61 139.269 259.685 138.664 258.827 138.714L257.314 138.866L259.332 139.925C262.862 141.791 276.68 146.279 279.757 146.531C282.581 146.784 282.732 146.733 282.984 145.624C284.195 139.471 285.657 133.52 286.868 129.586C287.675 127.014 288.179 124.694 288.028 124.442C287.725 123.887 285.96 123.837 285.607 124.392Z"
                  fill="black"
                />
                <path
                  d="M186.558 129.643C186.155 130.147 186.205 131.156 186.709 133.324C187.668 137.863 188.777 140.133 190.038 140.133C190.946 140.133 191.047 139.931 190.744 138.973C190.542 138.368 189.937 136.149 189.382 134.081C188.273 129.845 187.466 128.584 186.558 129.643Z"
                  fill="black"
                />
                <path
                  d="M249.647 137.462C248.84 138.521 246.823 141.396 245.209 143.867C232.096 163.889 216.866 177.556 204.106 180.784C199.82 181.893 189.279 181.49 182.219 179.977C171.628 177.707 159.676 172.866 152.514 167.923C149.135 165.604 147.622 164.897 147.622 165.604C147.622 165.805 147.975 166.562 148.379 167.419C149.186 168.882 149.186 168.932 147.874 168.579C145.655 168.024 146.513 169.083 150.043 171.202C153.977 173.673 154.834 174.026 165.274 177.959C177.882 182.65 186.405 184.465 196.088 184.516C207.99 184.516 216.815 180.178 229.171 168.226C235.98 161.619 240.922 155.618 246.116 147.7C249.495 142.556 252.118 136.555 251.361 135.798C251.261 135.647 250.454 136.403 249.647 137.462Z"
                  fill="black"
                />
                <path
                  d="M374.066 164.086C374.066 165.8 381.228 169.583 388.54 171.751C390.305 172.256 391.718 172.911 391.718 173.163C391.718 173.466 390.608 175.433 389.196 177.551C385.867 182.594 380.975 187.032 375.932 189.554C369.174 192.933 365.392 192.429 352.179 186.427C349.203 185.065 346.581 184.107 346.379 184.259C345.875 184.813 349.203 187.335 352.834 189.251C362.669 194.345 371.091 195.656 376.588 192.983C378.101 192.227 380.723 190.512 382.388 189.201C388.187 184.46 394.895 175.181 394.643 172.155C394.491 170.743 394.239 170.591 390.709 169.633C388.641 169.028 384.203 167.364 380.824 165.952C377.496 164.489 374.571 163.329 374.419 163.329C374.218 163.329 374.066 163.682 374.066 164.086Z"
                  fill="black"
                />
                <path
                  d="M368.264 166.913C366.701 169.939 361.506 175.285 358.177 177.201C355.656 178.714 351.218 179.975 348.444 179.975C346.124 179.975 346.881 180.883 349.503 181.236C354.294 181.891 360.75 179.017 365.944 173.923C368.97 170.948 371.794 166.257 371.34 165.097C370.786 163.635 369.525 164.391 368.264 166.913Z"
                  fill="black"
                />
                <path
                  d="M369.02 176.191C368.213 177.2 368.516 177.452 372.349 179.116C375.526 180.478 378.098 180.882 378.098 179.974C378.098 179.671 377.846 179.469 377.593 179.469C377.291 179.469 375.627 178.562 373.861 177.452C370.281 175.183 369.928 175.082 369.02 176.191Z"
                  fill="black"
                />
                <path
                  d="M331.397 179.218C330.439 181.589 330.489 183.152 331.649 184.564C332.557 185.724 332.708 185.724 333.515 184.917C334.322 184.11 334.322 184.01 333.465 183.203C332.759 182.497 332.658 181.841 332.91 179.874C333.313 176.949 332.506 176.596 331.397 179.218Z"
                  fill="black"
                />
                <path
                  d="M338.004 178.96C336.592 181.633 337.348 185.668 339.416 186.323C341.08 186.878 341.635 185.668 340.324 184.306C339.315 183.196 339.164 182.642 339.365 180.221C339.618 177.144 339.164 176.691 338.004 178.96Z"
                  fill="black"
                />
                <path
                  d="M361.608 181.228C361.204 182.287 361.406 182.438 365.592 184.103C369.223 185.565 375.325 186.675 374.317 185.666C373.51 184.859 363.726 180.472 362.818 180.472C362.314 180.472 361.809 180.825 361.608 181.228Z"
                  fill="black"
                />
                <path
                  d="M194.375 191.922C193.871 192.427 193.972 194.545 194.526 195.604C195.737 197.924 193.366 199.537 187.819 200.143C185.549 200.445 175.766 200.95 166.032 201.403C139.908 202.513 121.601 203.824 113.734 205.186C108.993 205.993 104.757 207.556 104.757 208.565C104.757 208.867 109.8 208.464 113.381 207.909L115.196 207.607L113.532 213.659C111.313 221.829 108.287 236.807 101.983 271.252C89.7785 337.621 85.4918 366.72 85.3909 383.968C85.3405 393.197 85.5422 394.206 88.2151 396.677C90.3837 398.695 95.3765 400.813 101.227 402.174C104.404 402.931 107.077 403.586 107.178 403.637C107.228 403.687 106.926 406.007 106.472 408.731C106.068 411.454 105.816 414.48 105.967 415.388C106.119 416.447 106.018 417.102 105.614 417.203C105.261 417.304 104.101 417.657 102.992 417.96C101.882 418.262 100.521 418.817 99.9659 419.22C99.0076 419.927 99.0076 419.977 99.865 420.935C100.924 422.095 102.941 422.7 109.044 423.81C111.565 424.264 115.701 425.071 118.273 425.625C125.938 427.239 135.369 427.844 141.421 427.138C149.44 426.231 152.668 424.768 152.668 422.045C152.668 420.229 151.054 418.666 147.372 416.951C141.522 414.177 129.469 412.21 129.469 413.976C129.469 414.177 131.335 414.883 133.655 415.488C142.48 417.808 149.137 420.431 149.137 421.54C149.137 422.448 146.464 423.104 140.816 423.558C128.864 424.566 113.23 421.843 110.254 418.212C109.195 416.951 109.346 409.689 110.456 407.571C111.868 404.948 112.725 404.746 121.147 404.948C137.286 405.352 150.196 404.746 157.812 403.133C169.159 400.762 169.361 399.804 169.361 342.614V305.294L170.369 306.555C174 310.892 179.296 325.467 191.5 364.804C197.704 384.775 200.528 391.231 204.109 393.601C206.63 395.265 211.219 396.324 216.061 396.324C219.642 396.324 220.297 396.476 220.549 397.182C220.701 397.686 221.508 399.552 222.365 401.367C225.593 408.277 229.022 410.95 235.124 411.353C244.959 411.958 263.719 404.847 266.695 399.3C267.754 397.383 267.401 395.971 265.636 395.063C260.946 392.643 243.9 394.509 240.218 397.888C238.755 399.199 238.755 399.3 239.714 399.35C240.319 399.35 243.042 398.896 245.766 398.342C251.212 397.182 260.189 396.476 262.307 397.03C264.375 397.535 263.871 398.442 260.24 400.661C253.936 404.494 245.261 407.268 238.1 407.772C233.006 408.125 230.182 407.066 227.862 403.889C225.946 401.267 225.593 399.552 226.4 397.081C226.954 395.467 227.358 395.013 228.82 394.66C242.185 391.13 256.003 384.473 260.744 379.228C263.013 376.706 263.417 374.638 262.459 369.999C260.694 361.274 255.398 349.271 229.577 295.46C216.717 268.68 209.454 251.18 201.688 228.133C199.116 220.669 194.022 203.925 194.022 203.118C194.022 202.916 194.829 202.563 195.787 202.362C199.317 201.706 200.023 198.529 197.552 194.192C196.14 191.771 195.182 191.065 194.375 191.922Z"
                  fill="black"
                />
                <path
                  d="M223.777 423.098C219.087 423.754 216.969 424.964 219.036 425.771C220.348 426.275 231.191 426.124 232.603 425.569C233.46 425.216 233.864 424.762 233.763 424.208C233.51 422.695 229.325 422.241 223.777 423.098Z"
                  fill="black"
                />
              </svg>
              <span className="text-lg font-semibold tracking-normal text-neutral-800 mt-2">
                No Employee found
              </span>
              <p className="text-base tracking-tight text-neutral-500 mt-0.5 max-w-sm">
                No employes not found. Click 'Add Employee' on the button below
                to add a new employee.
              </p>
              <div>
                <Button
                  text={"Add  Employee"}
                  cls={
                    "flex justify-center items-center bg-gradient-to-r from-neutral-900 via-neutral-800 to-neutral-950 text-white shadow-md p-2.5 rounded-lg text-sm gap-x-2 mt-2 hover:bg-neutral-800"
                  }
                  onclick={() => setIsOpen(!isOpen)}
                  // href={"/Admin/AddEmployee"}
                  // order={true}
                  children={<PlusCircleIcon className="w-5 h-5" />}
                />
              </div>
            </div>
          </div>
        </div>
      )}
      {isOpenDelete && (
        <Popup
          delId={delId}
          open={isOpenDelete}
          setOpen={setIsOpenDelete}
          onClose={onClose}
          onConfirm={handleModelUpdate}
        />
      )}
      {isOpen && (
        <OfficeEmployeModel
          initialValue={initialValue}
          onSubmit={onCreate}
          updatedRoleField={updatedRoleField}
          setResetFlag={setResetFlag}
          resetFlag={resetFlag}
          isOpen={isOpen}
          onHandleCloseModal={onHandleCloseModal}
          btnName={editId ? "Edit Employe" : "Add Employe"}
        />
      )}
      {drawer && (
        <SideDrawer
          isOpen={drawer}
          onRequestClose={closeDrawer}
          data={initialValue}
          btnEdit={sendMailTest}
        />
      )}
    </>
  );
};

const OfficeEmployeModel = ({
  updatedRoleField,
  setResetFlag,
  onSubmit,
  resetFlag,
  initialValue,
  btnName,
  isOpen,
  onHandleCloseModal,
}) => {
  return (
    <EmployeeModelCard
      cls={"sm:max-w-xl"}
      isOpen={isOpen}
      onRequestClose={onHandleCloseModal}
    >
      {/* <main className="w-full max-w-2xl mx-auto p-6"> */}
      {/* <div className="bg-white border border-gray-200 rounded-xl shadow-sm"> */}
      <div className="p-4 sm:p-7">
        <div>
          <div className="relative">
            <div className="flex  items-center gap-3">
              <img className="h-10 w-10" src="/images/Logo.svg" />
              <span className="text-gray-800 font-semibold text-lg">
                Creative Design & Construction.
              </span>
            </div>
          </div>
          <div className="py-3 flex items-center text-xs text-gray-400 uppercase before:flex-[1_1_0%] before:border-t before:border-gray-200 before:me-6 after:flex-[1_1_0%] after:border-t after:border-gray-200 after:ms-6">
            {btnName.split(" ")[0]} Office Employe
          </div>
          <div className="grid gap-y-4 text-gray-600">
            <ReactHookForm
              initialValues={initialValue}
              fields={updatedRoleField}
              setResetFlag={setResetFlag}
              onSubmit={onSubmit}
              resetFlag={resetFlag}
              btnName={btnName}
            />
          </div>
          {/* {error && (
                    <div className="text-red-800 bg-red-100 text-sm font-medium p-2 rounded">
                    {error && error}
                    </div>
                  )} */}
          {/* </div> */}
        </div>
      </div>
      {/* </main> */}
    </EmployeeModelCard>
  );
};
